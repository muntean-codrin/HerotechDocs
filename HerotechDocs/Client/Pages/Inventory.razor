@page "/inventory"
@using System.IO;
@using HerotechDocs.Shared;
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
<div class="table-responsive">
    <div class="table-wrapper">
        <div class="table-title">
            <div class="row">
                <div class="col-sm-6">
                    <h2>Manager <b>Inventar</b></h2>
                </div>
            </div>
        </div>
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Serie</th>
                    <th>Nume</th>
                    <th>Contract</th>
                    <th>Actiuni</th>
                </tr>
            </thead>
            <tbody>
                @if (items != null)
                {
                    @foreach (var item in items)
                    {
                        <tr>
                            <td>@item.Id</td>
                            <td>@item.Name</td>
                            <td><a href="details/@item.Contract.Id">@item.Contract.Sponsor, @DateToString(item.Contract.Date)</a></td>

                            <td>
                                <a href="#deleteItemModal" class="delete" data-toggle="modal"><i class="material-icons" data-toggle="tooltip" title="Stergere" @onclick="() => DeleteConfirmation(item)">&#xE872;</i></a>
                            </td>

                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Delete Contract HTML -->
<div id="deleteItemModal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <form>
                <div class="modal-header">
                    <h4 class="modal-title">Sterge itemul</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                </div>
                <div class="modal-body">
                    @if (toDelete != null)
                    {
                        <p> Esti sigur ca vrei sa stergi itemuk <b>@toDelete.Name ?</b></p>
                    }
                    @if (failDelete)
                    {
                        <p class="text-danger"><small>Eroare la stergerea itemului!</small></p>
                    }

                </div>
                <div class="modal-footer">
                    <input type="button" class="btn btn-default" data-dismiss="modal" value="Renunta">
                    <input type="button" class="btn btn-danger" value="Sterge" @onclick="Delete">
                </div>
            </form>
        </div>
    </div>
</div>



@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    List<Item> items;
    Item toDelete;
    bool failDelete;

    private void DeleteConfirmation(Item item)
    {
        failDelete = false;
        toDelete = item;
    }

    private async void Delete()
    {

        var response = await Http.DeleteAsync($"api/Items/{toDelete.Id}");
        if (response.IsSuccessStatusCode)
        {
            items.Remove(toDelete);
            await JSRuntime.InvokeVoidAsync("CloseModal", "#deleteItemModal");
            StateHasChanged();
        }
        else
        {
            failDelete = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        items = await Http.GetFromJsonAsync<List<Item>>("api/Items");
    }

    string DateToString(DateTime d)
    {
        return $"{d.Day}/{d.Month}/{d.Year}";
    }

}
